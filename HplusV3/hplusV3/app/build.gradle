def versionMajor = 3
def versionMinor = 4
def versionPatch = 1
def title = "Version"
def leftbracket = "("
def precontend = "Alpha"
def content = 000
def enviroment = 0
def rightbracket = ")"
def variableFile = new File("version_code.var")

def versionBuild = {
    println variableFile.exists()

    if (variableFile.exists()){
        content = variableFile.text.toInteger()
    }
    return content
}.call()

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.3.0'
    }
}

allprojects {
    repositories {
        mavenCentral()
    }
}

apply plugin: 'com.android.application'
apply plugin: 'jacoco'

android {
    compileSdkVersion 23
    buildToolsVersion '26.0.2'
    lintOptions {
        abortOnError false
    }
    signingConfigs {
        release {
            storeFile file("/Applications/Android/Honeywell_air.keystore")
            storePassword "HON123well"
            keyAlias "air"
            keyPassword "HON123well"
        }
    }
    defaultConfig {
        applicationId 'com.honeywell.hch.airtouchv3'
        minSdkVersion 11
        targetSdkVersion 23

        versionCode 13
        versionName "Version 3.4.2"

    }
    buildTypes {
        debug {
            signingConfig signingConfigs.release
            testCoverageEnabled = true
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            testCoverageEnabled = false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        androidTest.setRoot('src/test')
    }
    productFlavors {
    }

}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:23.0.0'
    compile 'com.squareup.okhttp:okhttp:2.5.0'
    compile 'com.squareup:otto:1.3.8'
    compile 'com.google.code.gson:gson:2.3.1'
    compile 'com.android.support:support-v4:23.1.0'
    compile 'com.googlecode.plist:dd-plist:1.8'
    //    compile 'com.umeng.analytics:analytics:latest.integration'
    //    compile project(':ZXingBarcode')
    testCompile 'com.squareup.dagger:dagger-compiler:1.2.2'
    testCompile 'org.hamcrest:hamcrest-integration:1.1'
    testCompile 'org.hamcrest:hamcrest-core:1.1'
    testCompile 'org.hamcrest:hamcrest-library:1.1'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile('junit:junit:4.12') {
        exclude module: 'hamcrest-core'
    }
    testCompile 'org.robolectric:robolectric:3.0'

    compile files('libs/notification_hubs_sdk.jar')
    compile files('libs/pushservice-4.5.5.77.jar')
    compile files('libs/com.broadcom.cooee.jar')
    compile files('libs/core-3.1.0.jar')
    compile files('libs/weiboSDKCore_3.1.2.jar')
    compile files('libs/libammsdk.jar')
}

android.testOptions.unitTests.all {
    // configure the set of classes for JUnit tests
    include '**/*Test.class'
    //exclude '**/espresso/**/*.class'

    // configure max heap size of the test JVM
    maxHeapSize = "2048m"
}

jacoco {
    toolVersion = "0.7.1.201405082137"
}


def coverageSourceDirs = [
        '../app/src/main/java/com/honeywell/hch/airtouch'
]

task jacocoTestReport(type: JacocoReport, dependsOn: "test") {
    group = "Reporting"

    description = "Generate Jacoco coverage reports"

    classDirectories = fileTree(
            dir: '../app/build/intermediates/classes/debug',
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$ViewInjector*.*',
                       '**/BuildConfig.*',
                       '**/Manifest*.*']
    )

    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
    executionData = files('../app/build/jacoco/testDebugUnitTest.exec')

    reports {
        xml.enabled = true
        html.enabled = true
    }

}



